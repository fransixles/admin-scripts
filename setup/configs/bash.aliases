################
#
# Bash aliases
# Install to ~/.bash_aliases
#

# A couple of default aliases.
alias h='history'
alias j="jobs -l"
alias pu="pushd"
alias po="popd"

alias dir='ls -ba'
alias dot="ls -a1 | grep -P '^\.'"
alias px="ps -aux"
alias timestamp='date "+%Y%m%dT%H%M%S"'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

################
#
# Custom aliases
#

# USENET news
#alias news="xterm -g 80x45 -e trn -e -S1 -N &"

# List all TODO/FIXME comments
alias tasks='grep --exclude-dir=.git --exclude-dir=.svn -rEI "TODO|FIXME" . 2>/dev/null'

# simple dig alias
alias ds='dig +noauthority +noadditional +noqr +nostats +noidentify +nocmd +noquestion +nocomments'

# Make the "tree" command pretty and useful by default
alias tree="tree -CAFa -I 'CVS|*.*.package|.svn|.git' --dirsfirst"

# Alias for getting OpenPGP keys for Launchpad PPAs on Ubuntu
alias launchpadkey="sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys"

# An alias to re-run last command with sudo. Similar to "sudo !!"
alias please='sudo $(fc -ln -1)'

# Open a manpage in the default (graphical) web browser
alias bman='man --html=x-www-browser'

# print all network interfaces' names and IPv4 addresses
alias ips='ip a | awk '\''/inet /&&!/ lo/{print $NF,$2}'\'' | column -t'

# fun screensaver
alias screensaver='for ((;;)); do echo -ne "\033[$((1+RANDOM%LINES));$((1+RANDOM%COLUMNS))H\033[$((RANDOM%2));3$((RANDOM%8))m$((RANDOM%10))"; sleep 0.1 ; done'

# ROT13 alternative
# Make sure to disable the rot13 function below if you enable this
# alias rot13="tr '[A-Za-z]' '[N-ZA-Mn-za-m]'"

####[ END ]####

###############
##
### Functions
##
###############

# view markdown using pandoc and lynx
function view-md()
{
  hash pandoc 2>/dev/null || { echo >&2 "You need to install pandoc. Aborting."; return; }
  hash lynx 2>/dev/null || { echo >&2 "You need to install lynx. Aborting."; return; }

  local file;
  if [ -z "$1" ]; then
    echo >&2 "No file specified."
    return
  fi
  file="$1"
  pandoc "$file" | lynx -stdin
}

#
# Csh compatability:
#
alias unsetenv=unset
function setenv () {
  export $1="$2"
}

# Function which adds an alias to the current shell and to
# the ~/.bash_aliases file.
function add-alias()
{
  local name=$1 value="$2"
  echo alias $name=\'$value\' >>~/.bash_aliases
  eval alias $name=\'$value\'
  alias $name
}

# list package contents without installing or downloading
# only works for debian/ubuntu packages
function deb_list () {
    curl -s $(lsb_release -si \
                | sed -e 's Ubuntu https://packages.ubuntu.com ' \
                      -e 's Debian https://packages.debian.org '
              )/$(lsb_release -sc)/all/$1/filelist \
      | sed -n -e '/<pre>/,/<\/pre>/p' \
      | sed -e 's/<[^>]\+>//g' -e '/^$/d';
}

# create a tgz of the current directory, excluding VCS folders
function tarcwd()
{
  D=$(builtin pwd)
  DN=$(dirname $D)
  DE=$(basename $D)
  F=$(date +$HOME/$(sed "s,[/ ],.,g" <<< ${DE/${HOME}/})-%F.tgz)
  if [ -e "${F}" ]; then
    echo >&2 "ERROR: Output file '${F}' already exists."
    return
  fi
  if (tar --ignore-failed-read --transform "s,^${DN}\/,,S" --transform "s,^${DE%/*},$(date +${DE%/*}.%F),S" --exclude-vcs -czPf "$F" "$D") &>/dev/null; then
    echo "Finished archiving $D -> $F"
  else
    echo >&2 "ERROR: Failed to archive $D"
  fi
}

# "repeat" command.  Like:
#
#       repeat 10 echo foo
function repeat()
{
  local count="$1" i;
  shift;
  for i in $(_seq 1 "$count"); do
    eval "$@";
  done
}

# Subfunction needed by `repeat'.
function _seq ()
{
  local lower upper output;
  lower=$1 upper=$2;

  if [ $lower -ge $upper ]; then return; fi
    while [ $lower -lt $upper ]; do
      echo -n "$lower "
      lower=$(($lower + 1))
    done
  echo "$lower"
}

function psg()
{
  ps -aux | grep $1 | grep -v grep
}

#
# This is a little like `zap' from Kernighan and Pike
#
function pskill()
{
  local pid

  pid=$(ps -ax | grep $1 | grep -v grep | awk '{ print $1 }')
  echo -n "killing $1 (process $pid)..."
  kill -9 $pid
  echo "slaughtered."
}

function term()
{
  TERM=$1
  export TERM
  tset
}

function xtitle()
{
  echo -n -e "\033]0;$*\007"
}

function cd()
{
  builtin cd "$@" && xtitle $HOST: $PWD
}

function bold()
{
  tput smso
}

function unbold()
{
  tput rmso
}

function rot13()
{
  if [ $# = 0 ] ; then
    tr "[a-m][n-z][A-M][N-Z]" "[n-z][a-m][N-Z][A-M]"
  else
    echo "$@" | tr "[a-m][n-z][A-M][N-Z]" "[n-z][a-m][N-Z][A-M]"
  fi
}

function follow()
{
  if [ $# -ne 1 ] ; then
    echo >&2 "usage: follow <file>"
  else
    tail -f $1
  fi
}

#
#  Remote login passing all 8 bits (so meta key will work)
#
function rl()
{
  rlogin $* -8
}

function setenv()
{
  if [ $# -ne 2 ] ; then
    echo "setenv: Too few arguments"
  else
    export $1="$2"
  fi
}

function chmog()
{
  if [ $# -ne 4 ] ; then
    echo "usage: chmog mode owner group file"
    return 1
  else
    chmod $1 $4
    chown $2 $4
    chgrp $3 $4
  fi
}
